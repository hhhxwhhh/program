{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Compile", // 任务名称，与launch.json的preLaunchTask相对应
      "command": "g++", // 要使用的编译器，C++用g++
      "args": [
        "-D GLEW_STATIC",
        "-ID:/assimp_build/assimp/include",
        "-ID:/assimp_build/assimp/build/include",
        "${fileDirname}/${fileBasenameNoExtension}.cpp", // 当前文件的路径，VSC会自动替换成当前打开的文
        "-o", // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
        "${fileDirname}/${fileBasenameNoExtension}.exe",
        "-g", // 生成和调试有关的信息
        "D:/Program/MinGW/lib/libglfw3.a",
        "D:/Program/MinGW/lib/glad.a",
        "D:/Program/MinGW/lib/glew32s.lib",
        "-LD:/assimp_build/assimp/build/lib",
        "-LD:/assimp_build/assimp/build/lib", // 指定库文件路径
        "-lassimp",
        "-lz",
        "-lopengl32", //链接系统中的opengl32库
        "-lgdi32", //链接系统中的gdi32库
        //"-l",
        //"d:/program/mingw/include/glm",
        "-l",
        "glut32", // 使用glut
        "-l",
        "glu32",
        "-l",
        "opengl32",
        "-Wall", // 开启额外警告
        "-static-libgcc", // 静态链接libgcc，一般都会加上
        "-fexec-charset=UTF-8", // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码
        "-std=c++17" // C++最新标准为c++17，或根据自己的需要进行修改
      ], // 编译的命令，其实相当于VSC帮你在终端中输了这些东西
      "type": "cppbuild", // process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
      "group": {
        "kind": "build",
        "isDefault": true // 不为true时ctrl shift B就要手动选择了
      },
      "presentation": {
        "echo": true,
        "reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
        "focus": false, // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
        "panel": "shared" // 不同的文件的编译信息共享一个终端面板
      }
      // "problemMatcher":"$gcc" // 此选项可以捕捉编译时终端里的报错信息；但因为有Lint，再开这个可能有双重报错
    }
  ]
}
